# ---- Build Stage ----
# Use a stable, rolling Alpine tag for Node.js
FROM node:20-alpine AS build

# Create a non-root user for security. Using fixed IDs is good practice.
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

WORKDIR /app

# Change ownership of the app directory to the new user
# This is the key fix that gives the 'nextjs' user write permissions
RUN chown -R nextjs:nodejs /app

# Copy package files with correct ownership. This layer is cached.
COPY --chown=nextjs:nodejs package*.json ./

# Switch to the non-root user BEFORE running npm install
USER nextjs

# Install dependencies. The --no-audit flag might be hiding NPM vulnerabilities.
RUN npm ci

# Copy the rest of the source code with correct ownership
COPY --chown=nextjs:nodejs . .

# Build the application as the non-root user
RUN npm run build


# ---- Final Stage ----
# Use the stable nginx:1-alpine tag, which is regularly updated with security patches
FROM nginx:1-alpine

# Install dumb-init for proper process signal management
RUN apk add --no-cache dumb-init

# The official Nginx image already creates the 'nginx' user and necessary directories.
# We don't need to manually create them or run 'apk upgrade'.

# Copy the built application from the 'build' stage with correct ownership
COPY --from=build --chown=nginx:nginx /app/build /usr/share/nginx/html

# Copy your custom Nginx configuration
COPY --chown=nginx:nginx nginx.conf /etc/nginx/conf.d/default.conf

# Switch to the non-root user
USER nginx

EXPOSE 80

# Health check to ensure the server is responsive
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD wget -q --spider http://localhost:80/ || exit 1

# Use dumb-init to properly start Nginx, ensuring correct signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# The default command from the base image is fine, but we can be explicit
CMD ["nginx", "-g", "daemon off;"]